"use strict";(()=>{document.querySelector(".slider"),document.querySelector(".slider__scene");const e=document.getElementById("timeline");!function(t){t.forEach(t=>{const i=function(e){const t=document.createElement("div"),i=document.createElement("div"),n=document.createElement("p"),o=document.createElement("div"),a=document.createElement("p"),s=document.createElement("ul"),l=document.createElement("div"),r=document.createElement("div");return t.classList.add("timeline__content"),r.classList.add("timeline__person-block"),i.classList.add("timeline__header"),void 0===e.favouriteColor&&(e.favouriteColor="#2797EB"),r.style.setProperty("--theme-color",e.favouriteColor),n.classList.add("title","title--h4"),o.classList.add("timeline__person-content"),l.classList.add("timeline__initials"),s.classList.add("list","list--vertical","timeline__list"),l.innerText=e.name.split(" ").map(e=>e[0]).join(""),n.innerText=e.name,a.innerText=e.about,i.style.backgroundColor=e.favouriteColor,l.style.backgroundColor=e.favouriteColor,e.responsibilities.forEach(e=>{const t=document.createElement("li");t.classList.add("list__item"),t.innerHTML=`<svg class="list__marker" width="15" height="15"><use xlink:href="img/svg/sprite.svg#right-arrow"></use></svg> ${e}`,s.appendChild(t)}),i.appendChild(n),t.appendChild(i),o.appendChild(a),o.appendChild(s),t.appendChild(o),r.appendChild(l),r.appendChild(t),r}(t);e.appendChild(i)})}([{id:1,name:"Andrius Vaitkus",about:"Experimental Physics student, UCL.",favouriteColor:"#B5DB40",responsibilities:["Research of application of origami in Mathematics and Engineering",'Development of the "Angle Trisection" simulation',"Participation in the initial folding tests","Report formatting","Minute taking in most meetings"]},{id:2,name:"Aishvarya Raj",about:"Theoretical Physics Student , UCL.",favouriteColor:"#9B67B2",responsibilities:["Main editor of the report","Research on Architecture and Computer Science","Development of “Doubling the Cube” simulation ","Participation in later folding tests"]},{id:3,name:"Gurprit Kaur",favouriteColor:"#1F6066",about:"Experimental Physics Student, UCL.",responsibilities:["Research of application of origami in cosmology","Part of research subgroup","Participation in folding tests for light-dependent self-folding","Co-editor of Project Report"]},{id:4,name:"Jennifer Jung",favouriteColor:"#F9C7D2",about:"Experimental Physics Student, UCL.",responsibilities:["Communications Officer","Research on science of folding in Genetics, DNA and Light Dependent Folding","Part of research subgroup","Participation in light dependent folding tests"]},{id:5,name:"Daniel Sanz",about:"Affiliate Physics Student at UCL, from Spain.",favouriteColor:"#cf090f",responsibilities:["Research on Mathematics","Understanding the Mathematica folding code","Proving the math code formula",'Development of "Folding the Cube" and "Biggest Equilateral Triangle in a Square" simulations',"Participation in folding tests"]},{id:6,name:"Haokai Jin",favouriteColor:"#1E90FF",about:"Experimental Physics Student, UCL.",responsibilities:["Research on Engineering, genetics, DNA and Self Folding Cube","Part of research subgroup","Participation in Heat self folding cube and light dependent folding test"]},{id:7,name:"Qingyue Hu",about:"Experimental Physics Student, UCL.",favouriteColor:"rgba(189, 195, 199, 1)",responsibilities:["Part of research subgroup","Research on Biological and Medical Science applications of origami","Participation in heat dependent self-folding","Understanding equations of self-folding"]},{id:8,name:"Kourosh Khodabakhsh",about:"Experimental Physics Student, UCL.",favouriteColor:"#6495ED",responsibilities:["Research into applications of origami in Cosmology, Engineering, Genetics and Self Folding Cube","Participation in self folding test","Material gathering for self folding tests and organising lab space","Chairman (for the most part)","Dealing with Andrius"]}]);const t=document.querySelectorAll(".timeline__person-block");t.forEach(e=>{const t=window.pageYOffset+e.getBoundingClientRect().top,i=(window.pageXOffset,e.getBoundingClientRect().left,window.pageXOffset,e.getBoundingClientRect().right,window.pageYOffset+e.getBoundingClientRect().bottom),n=window.pageYOffset,o=(window.pageXOffset,window.pageXOffset,document.documentElement.clientWidth,window.pageYOffset+document.documentElement.clientHeight);i>n&&t+e.clientHeight>o&&e.classList.add("is-hidden")}),window.addEventListener("scroll",()=>{t.forEach(e=>{!function(e){const t={top:window.pageYOffset+e.getBoundingClientRect().top,left:window.pageXOffset+e.getBoundingClientRect().left,right:window.pageXOffset+e.getBoundingClientRect().right,bottom:window.pageYOffset+e.getBoundingClientRect().bottom},i={top:window.pageYOffset,left:window.pageXOffset,right:window.pageXOffset+document.documentElement.clientWidth,bottom:window.pageYOffset+document.documentElement.clientHeight};t.bottom>i.top&&t.top+.5*e.clientHeight<i.bottom&&e.classList.contains("is-hidden")&&(e.classList.remove("is-hidden"),e.querySelector(".timeline__content").classList.remove("is-hidden"),e.querySelector(".timeline__initials").classList.remove("is-hidden"),e.querySelector(".timeline__content").classList.add("bounce-in"),e.querySelector(".timeline__initials").classList.add("bounce-in"))}(e)})})})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
